{"mappings":"AAAO,MAAMA,EAAQ,CACnB,SACA,QACA,SACA,WACA,QACA,WACA,aACA,WACA,SACA,WACA,SACA,UACA,YACA,cACA,SACA,QACA,UACA,WACA,SACA,YACA,aACA,YACA,eACA,QACA,YACA,UACA,WACA,aACA,QACA,YACA,OACA,UACA,WACA,QACA,WACA,SACA,SACA,QACA,WACA,aACA,YACA,aACA,aACA,WACA,UACA,YACA,gBACA,WACA,UACA,aACA,eACA,WACA,kBACA,YACA,aACA,SACA,WACA,cACA,aACA,WACA,aACA,aACA,UACA,eACA,cACA,cACA,WACA,YACA,WACA,SACA,UACA,SACA,UACA,cACA,YACA,YACA,aACA,UACA,WACA,YACA,SACA,UACA,SACA,SACA,YACA,UACA,YACA,YACA,SACA,YACA,UACA,aACA,UACA,WACA,UACA,WACA,OACA,MACA,OACA,YACA,QACA,OACA,OACA,QACA,UACA,UACA,UACA,QACA,YACA,SACA,WACA,UACA,UACA,YACA,QACA,YACA,cACA,SACA,aACA,SACA,UACA,UACA,UACA,UACA,WACA,UACA,SACA,OACA,WACA,UACA,eACA,QACA,YACA,UACA,SACA,SACA,YCvIIC,EAAgB,KACpB,IAAIC,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,EAAMM,QAE7C,OADiBN,EAAME,EAChB,EC2VI,IA9Vb,MACEK,GACAC,GAAWC,KAAKC,MAAMC,aAAaC,QAAQ,aAAe,GAC1DV,GAASW,SAASF,aAAaC,QAAQ,WAAa,EACpDE,IAAQ,IAAIC,MAAOC,iBAEnBC,GAAqBJ,SAASF,aAAaC,QAAQ,uBAAyB,EAC5EM,IAAe,IAAIH,MAAOI,UAC1BC,GAA0BC,MAAKH,EAAeG,MAAKJ,EACnDK,GAAmB,MACnBC,GAAYF,MAAKC,EAAmBD,MAAKD,EACzCI,GAAiBf,KAAKC,MAAMC,aAAaC,QAAQ,mBAAqB,GAEtEa,cACEJ,KAAKK,KAAOC,SAASC,cAAc,QACnCP,KAAKQ,MAAQF,SAASC,cAAc,SACpCP,KAAKS,cAAgBH,SAASC,cAAc,kBAC5CP,KAAKU,WAAaJ,SAASC,cAAc,eACzCP,KAAKW,oBAAsBL,SAASC,cAAc,wBAClDP,KAAKY,KAAON,SAASC,cAAc,QACnCP,KAAKa,OAASP,SAASC,cAAc,WACrCP,KAAKc,SAAWR,SAASC,cAAc,sBACvCP,KAAKe,OAAST,SAASC,cAAc,WACrCP,KAAKgB,QAAUV,SAASC,cAAc,YACtCP,KAAKiB,SAAWX,SAASC,cAAc,aACvCP,KAAKkB,mBAAqBZ,SAASC,cAAc,uBACjDP,KAAKmB,OAASb,SAASC,cAAc,UAErCP,KAAKK,KAAKe,iBAAiB,SAAUpB,KAAKqB,YAAYC,KAAKtB,OAC3DA,KAAKS,cAAcW,iBAAiB,QAASpB,KAAKuB,WAAWD,KAAKtB,OAClEA,KAAKS,cAAcW,iBAAiB,QAASpB,KAAKwB,eAAeF,KAAKtB,OACtEA,KAAKS,cAAcW,iBAAiB,QAASpB,KAAKyB,kBAAkBH,KAAKtB,OACzEA,KAAKiB,SAASG,iBAAiB,QAASpB,KAAK0B,qBAAqBJ,KAAKtB,OACvEA,KAAKiB,SAASG,iBAAiB,QAASpB,KAAK2B,eAAeL,KAAKtB,OACjEA,KAAKU,WAAWU,iBAAiB,QAASpB,KAAK4B,mBAAmBN,KAAKtB,OACvEA,KAAKW,oBAAoBS,iBAAiB,QAASpB,KAAK6B,YAAYP,KAAKtB,OACzEA,KAAKc,SAASM,iBAAiB,QAASpB,KAAK8B,uBAAuBR,KAAKtB,OACzEA,KAAKgB,QAAQI,iBAAiB,QAASpB,KAAK+B,WAAWT,KAAKtB,OAC5DA,KAAKmB,OAAOC,iBAAiB,QAASpB,KAAKgC,kBAAkBV,KAAKtB,OAG9DA,MAAKD,GAA2BC,MAAKC,GACvCD,MAAKG,EAAiBvB,IACtBU,aAAa2C,QAAQ,oBAAqBjC,MAAKH,EAAaqC,YAC5D5C,aAAa2C,QAAQ,gBAAiB7C,KAAK+C,UAAUnC,MAAKG,KAE1DiC,QAAQC,IAAI,2CAA2CrC,MAAKE,EAAY,eAG1EF,KAAKsC,uBACLhD,aAAa2C,QAAQ,oBAAqBjC,MAAKH,EAAaqC,WAC9D,CAEAI,uBACOtC,MAAKG,IACRH,MAAKG,EAAiBvB,KAExBoB,KAAKQ,MAAM+B,MAAQvC,MAAKG,EACxBH,KAAKwC,WAAWxC,MAAKG,GACrBb,aAAa2C,QAAQ,gBAAiB7C,KAAK+C,UAAUnC,MAAKG,GAC5D,CAEA4B,aACE/B,KAAKW,oBAAoB8B,UAAUC,IAAI,UACvC1C,KAAKW,oBAAoB8B,UAAUE,OAAO,QAC1C3C,KAAKgB,QAAQyB,UAAUC,IAAI,SAC7B,CAEAZ,yBACE9B,KAAKe,OAAO0B,UAAU1B,OAAO,sBAC7BT,SAASsC,gBAAgBH,UAAU1B,OAAO,OAC5C,CAEAc,YAAYgB,GACV,IAAIC,EAASD,EAAEC,OACXC,EAAI/C,KAAKU,WAAWH,cAAc,SAEtC,QAAQ,GACN,KAAKuC,EAAOL,UAAUO,SAAS,UAC7B1C,SAASsC,gBAAgBK,MAAMC,WAAa,gCAC5ClD,KAAKY,KAAKqC,MAAMC,WAAa,gCAC7BH,EAAEI,YAAc,kBAChB,MACF,KAAKL,EAAOL,UAAUO,SAAS,SAC7B1C,SAASsC,gBAAgBK,MAAMC,WAAa,sBAC5ClD,KAAKY,KAAKqC,MAAMC,WAAa,sBAC7BH,EAAEI,YAAc,QAChB,MACF,KAAKL,EAAOL,UAAUO,SAAS,QAC7B1C,SAASsC,gBAAgBK,MAAMC,WAAa,0BAC5ClD,KAAKY,KAAKqC,MAAMC,WAAa,0BAC7BH,EAAEI,YAAc,YAChB,MACF,QACE7C,SAASsC,gBAAgBK,MAAMC,WAAa,gCAC5ClD,KAAKY,KAAKqC,MAAMC,WAAa,gCAC7BH,EAAEI,YAAc,kBAEtB,CAEAvB,qBACE5B,KAAKW,oBAAoB8B,UAAU1B,OAAO,UAC1Cf,KAAKW,oBAAoB8B,UAAU1B,OAAO,QAC1Cf,KAAKgB,QAAQyB,UAAU1B,OAAO,UAE9BT,SAASC,cAAc,UAAUkC,UAAU1B,OAAO,SACpD,CAEAU,kBAAkBoB,GAChB,IAAIO,EAAUP,EAAEC,OAAOO,QAAQ,qBAC1BD,IAGLpD,KAAKQ,MAAM+B,MAAQa,EAAQD,YAC3BnD,KAAKwC,WAAWY,EAAQD,YAAYG,QACtC,CAEA3B,eAAekB,GACb,IAAIU,EAASV,EAAEC,OAAOO,QAAQ,WAC9B,IAAKE,EAAQ,OAEb,MAAM1E,EAAQW,SAAS+D,EAAOC,IACxBC,EAAYzD,MAAKb,EAASuE,WAAWN,GAAYA,EAAQI,KAAO3E,IACtEmB,MAAKb,EAASwE,OAAOF,EAAW,GAChCnE,aAAa2C,QAAQ,UAAW7C,KAAK+C,UAAUnC,MAAKb,IACpDa,KAAK4D,iBACP,CAEAlC,qBAAqBmB,GACnB,IAAIO,EAAUP,EAAEC,OAAOO,QAAQ,gBAC/B,IAAKD,EAAS,OAEd,GAAIP,EAAEC,OAAOL,UAAUO,SAAS,UAAW,OAG3C,IAAIa,EAAWT,EAAQU,kBAAkBA,kBAAkBX,YAAYG,OACvEtD,KAAKQ,MAAM+B,MAAQsB,EACnB7D,KAAKwC,WAAWqB,GAGhB7D,KAAKkB,mBAAmBuB,UAAUC,IAAI,qBACxC,CAEAkB,kBACE,IAAIzE,EAAU,GACda,MAAKb,EAAS4E,SAASC,IACrB7E,GAAW,0JACsI6E,EAAUR,6GAEtGQ,EAAUC,sEACXD,EAAUvE,qIAEoCuE,EAAUR,0BACnG,IAEXxD,KAAKiB,SAASiD,UAAY/E,GAAW,qEACvC,CAEA6C,oBACEhC,KAAKkB,mBAAmBuB,UAAUC,IAAI,qBACxC,CAEAlB,eAAeqB,GACGA,EAAEC,OAAOO,QAAQ,uBAEjCrD,KAAKkB,mBAAmBuB,UAAUE,OAAO,sBACzC3C,KAAK4D,kBACP,CAEArC,WAAWsB,GACT,IAAIsB,EAAYtB,EAAEC,OAAOO,QAAQ,UACjC,IAAKc,EAAW,OAChB,IAAIC,GAAa,EAEjB,IAAK,MAAMC,KAAYrE,MAAKd,EAAMoF,UAChC,GAAID,EAASE,MAAO,CAClB,MAAMA,EAAQ,IAAIC,MAAMH,EAASE,OACjCA,EAAME,OAEN,IAAIC,EAAYP,EAAUL,kBAE1BS,EAAMI,QAAU,KACdD,EAAUjC,UAAUE,OAAO,YAC3B+B,EAAUjC,UAAUC,IAAI,YAG1BgC,EAAUjC,UAAUE,OAAO,WAC3B+B,EAAUjC,UAAUC,IAAI,YACxB0B,GAAa,EAEb,KACF,CAGGA,GAAYQ,MAAM,qGACzB,CAEAC,mBAAmB3F,GACjB,IAAI4F,EAAO,8IAG0B5F,EAAK+E,KAAKhF,OAAS,GAAK,cAAgB,qEAAqEC,EAAK+E,2DAC5G/E,EAAKmF,SAAWnF,EAAKmF,SAAW,8sBAcrEnF,EAAK6F,SAASC,KAAKC,GACZ,IACLA,EAAOC,SAASjG,OACZ,4MAGCgG,EAAOC,SACNF,KAAKf,GACG,mFAAmFA,WAE3FkB,KAAK,+CAGP,wCAGUF,EAAOG,uHACmCH,EAAOG,kPAKrCH,EAAOI,YAAYpG,OAAS,EAAI,aAAe,uBAErEgG,EAAOI,YAAYpG,OACfgG,EAAOI,YACJL,KAAKf,GACG,mEAAmEA,EAAKqB,8FAC3BrB,EAAKsB,QAAUtB,EAAKsB,QAAU,WAEnFJ,KAAK,IACR,oDAMRF,EAAOO,SAASvG,OACZ,4MAGCgG,EAAOO,SACNR,KAAKf,GACG,mFAAmFA,WAE3FkB,KAAK,+CAGP,qOAUJjG,EAAKuG,WAAWxG,OACZC,EAAKuG,WACFT,KAAKU,GACG,0MAEkFA,sBAAwBA,8JAKlHP,KAAK,IACR,6BAIZnF,KAAKS,cAAcyD,UAAYY,CACjC,CAEAzD,YAAYwB,GACVA,EAAE8C,iBACG3F,KAAKQ,MAAM+B,OAChBvC,KAAKwC,WAAWxC,KAAKQ,MAAM+B,MAC7B,CAEAqD,iBAAiB3B,GACf,IACEjE,KAAKa,OAAO4B,UAAUE,OAAO,UAE7B3C,KAAKS,cAAcyD,UAAY,GAC/B,MAAM2B,QAAYC,MAAM,mDAAmD7B,MACpE/E,SAAc2G,EAAIE,OACzB,IAAKF,EAAIG,GAAI,MAAM,IAAIC,MAAM,mBAE7BjG,MAAKd,EAAQA,EACbc,KAAK6E,mBAAmB7E,MAAKd,KAG3Bc,MAAKnB,EAEP,IAAIqH,EAAU,CACZ1C,GAAIxD,MAAKnB,EACToF,KAAMjE,MAAKd,EAAM+E,KACjBxE,KAAMO,MAAKP,EACX0G,YAAanG,MAAKH,GAGhBhB,EAAQ,EACgBmB,MAAKb,EAASiH,MAAMpC,GAAcA,EAAUC,OAASjE,MAAKd,EAAM+E,QAI1FpF,EAAQmB,MAAKb,EAASuE,WAAW2C,GAAQA,EAAIpC,OAASjE,MAAKd,EAAM+E,OAG7DjE,MAAKb,EAASN,GAAOsH,aAAenG,MAAKC,EAC3CD,MAAKb,EAASmH,KAAKJ,IAEnBlG,MAAKb,EAASN,GAAOsH,YAAcnG,MAAKH,EACxCG,MAAKb,EAASN,GAAOY,KAAOO,MAAKP,IAGnCO,MAAKb,EAASmH,KAAKJ,GAIrB5G,aAAa2C,QAAQ,UAAW7C,KAAK+C,UAAUnC,MAAKb,IACpDG,aAAa2C,QAAQ,QAAS7C,KAAK+C,UAAUnC,MAAKnB,GACpD,CAAE,MAAO0H,GACPnE,QAAQC,IAAIkE,GACZvG,KAAKS,cAAcyD,UAAY,oIACjC,SACElE,KAAKa,OAAO4B,UAAUC,IAAI,SAC5B,CACF","sources":["src/app/WordList.js","src/app/wordoftheday.js","src/app/script.js"],"sourcesContent":["export const words = [\r\n  'abacus',\r\n  'abhor',\r\n  'abject',\r\n  'abnegate',\r\n  'abode',\r\n  'abrogate',\r\n  'abstemious',\r\n  'abstruse',\r\n  'accede',\r\n  'accolade',\r\n  'accost',\r\n  'acerbic',\r\n  'acquiesce',\r\n  'acrimonious',\r\n  'acumen',\r\n  'adage',\r\n  'adamant',\r\n  'admonish',\r\n  'adroit',\r\n  'adulation',\r\n  'adulterate',\r\n  'adumbrate',\r\n  'adventitious',\r\n  'aegis',\r\n  'aesthetic',\r\n  'affable',\r\n  'affluent',\r\n  'aggrandize',\r\n  'agile',\r\n  'agitation',\r\n  'agog',\r\n  'ailment',\r\n  'alacrity',\r\n  'alias',\r\n  'alienate',\r\n  'allege',\r\n  'allure',\r\n  'aloof',\r\n  'altruism',\r\n  'amalgamate',\r\n  'ambiguous',\r\n  'ambivalent',\r\n  'ameliorate',\r\n  'amenable',\r\n  'amiable',\r\n  'amorphous',\r\n  'anachronistic',\r\n  'anathema',\r\n  'anomaly',\r\n  'antagonize',\r\n  'antediluvian',\r\n  'antedote',\r\n  'anthropomorphic',\r\n  'antipathy',\r\n  'antithesis',\r\n  'apathy',\r\n  'aphorism',\r\n  'apocalyptic',\r\n  'apocryphal',\r\n  'apostate',\r\n  'apotheosis',\r\n  'apparition',\r\n  'appease',\r\n  'apprehension',\r\n  'approbation',\r\n  'appropriate',\r\n  'aptitude',\r\n  'arbitrary',\r\n  'arboreal',\r\n  'arcane',\r\n  'archaic',\r\n  'ardent',\r\n  'arduous',\r\n  'aristocracy',\r\n  'armistice',\r\n  'arrogance',\r\n  'articulate',\r\n  'ascetic',\r\n  'asperity',\r\n  'aspersion',\r\n  'assail',\r\n  'assuage',\r\n  'astute',\r\n  'asylum',\r\n  'atavistic',\r\n  'atheist',\r\n  'atonement',\r\n  'attenuate',\r\n  'attest',\r\n  'attribute',\r\n  'augment',\r\n  'auspicious',\r\n  'austere',\r\n  'autocrat',\r\n  'avarice',\r\n  'aversion',\r\n  'avow',\r\n  'awe',\r\n  'awry',\r\n  'axiomatic',\r\n  'azure',\r\n  'balk',\r\n  'balm',\r\n  'banal',\r\n  'baneful',\r\n  'barrage',\r\n  'bastion',\r\n  'bawdy',\r\n  'beatitude',\r\n  'bedlam',\r\n  'befuddle',\r\n  'beguile',\r\n  'belabor',\r\n  'beleaguer',\r\n  'belie',\r\n  'bellicose',\r\n  'belligerent',\r\n  'bemoan',\r\n  'benevolent',\r\n  'benign',\r\n  'bequest',\r\n  'bereave',\r\n  'berserk',\r\n  'beseech',\r\n  'besmirch',\r\n  'bestial',\r\n  'betray',\r\n  'bevy',\r\n  'bewilder',\r\n  'bigotry',\r\n  'blandishment',\r\n  'blase',\r\n  'blasphemy',\r\n  'blatant',\r\n  'blight',\r\n  'blithe',\r\n  'bloviate',\r\n];\r\n","import { words } from './WordList.js';\r\n\r\nconst getRandomWord = () => {\r\n  let index = Math.floor(Math.random() * words.length);\r\n  let randomWord = words[index];\r\n  return randomWord;\r\n};\r\n\r\nexport { getRandomWord };\r\n","import { getRandomWord } from './wordoftheday';\r\n\r\nclass Dictionary {\r\n  #data;\r\n  #history = JSON.parse(localStorage.getItem('history')) || [];\r\n  #index = parseInt(localStorage.getItem('index')) || 0;\r\n  #date = new Date().toLocaleString();\r\n\r\n  #lastGeneratedTime = parseInt(localStorage.getItem('lastGeneratedTime')) || 0;\r\n  #currentTime = new Date().getTime(); // results in milliseconds\r\n  #timeSinceLastGenerated = this.#currentTime - this.#lastGeneratedTime;\r\n  #twentyFourHours = 86400000;\r\n  #timeLeft = this.#twentyFourHours - this.#timeSinceLastGenerated;\r\n  #generatedWord = JSON.parse(localStorage.getItem('generatedWord')) || '';\r\n\r\n  constructor() {\r\n    this.form = document.querySelector('form');\r\n    this.input = document.querySelector('input');\r\n    this.mainContainer = document.querySelector('.main__content');\r\n    this.fontChange = document.querySelector('.fontChange');\r\n    this.fontToggleContainer = document.querySelector('.fontToggleContainer');\r\n    this.body = document.querySelector('body');\r\n    this.loader = document.querySelector('.loader');\r\n    this.toggleBg = document.querySelector('.toggle__Container');\r\n    this.toggle = document.querySelector('.toggle');\r\n    this.overlay = document.querySelector('.overlay');\r\n    this.listItem = document.querySelector('.listItem');\r\n    this.historyModalWindow = document.querySelector('.historyModalWindow');\r\n    this.button = document.querySelector('button');\r\n\r\n    this.form.addEventListener('submit', this._searchWord.bind(this));\r\n    this.mainContainer.addEventListener('click', this._playAudio.bind(this));\r\n    this.mainContainer.addEventListener('click', this._renderHistory.bind(this));\r\n    this.mainContainer.addEventListener('click', this._searchStringCall.bind(this));\r\n    this.listItem.addEventListener('click', this._searchStringHistory.bind(this));\r\n    this.listItem.addEventListener('click', this._deleteHistory.bind(this));\r\n    this.fontChange.addEventListener('click', this._openFontContainer.bind(this));\r\n    this.fontToggleContainer.addEventListener('click', this._toggleFont.bind(this));\r\n    this.toggleBg.addEventListener('click', this._toggleBackgroundColor.bind(this));\r\n    this.overlay.addEventListener('click', this._hideModal.bind(this));\r\n    this.button.addEventListener('click', this._closeWindowModal.bind(this));\r\n\r\n    // if time since the last word generated is greater than or equal to 24hours\r\n    if (this.#timeSinceLastGenerated >= this.#twentyFourHours) {\r\n      this.#generatedWord = getRandomWord();\r\n      localStorage.setItem('lastGeneratedTime', this.#currentTime.toString());\r\n      localStorage.setItem('generatedWord', JSON.stringify(this.#generatedWord));\r\n    } else {\r\n      console.log(`Time until next random word generation: ${this.#timeLeft / 1000} seconds`);\r\n    }\r\n\r\n    this._generateRandomWords();\r\n    localStorage.setItem('lastGeneratedTime', this.#currentTime.toString());\r\n  }\r\n\r\n  _generateRandomWords() {\r\n    if (!this.#generatedWord) {\r\n      this.#generatedWord = getRandomWord();\r\n    }\r\n    this.input.value = this.#generatedWord;\r\n    this._fetchWord(this.#generatedWord);\r\n    localStorage.setItem('generatedWord', JSON.stringify(this.#generatedWord));\r\n  }\r\n\r\n  _hideModal() {\r\n    this.fontToggleContainer.classList.add('hidden');\r\n    this.fontToggleContainer.classList.remove('flex');\r\n    this.overlay.classList.add('hidden');\r\n  }\r\n\r\n  _toggleBackgroundColor() {\r\n    this.toggle.classList.toggle('translate-x-[25px]');\r\n    document.documentElement.classList.toggle('dark');\r\n  }\r\n\r\n  _toggleFont(e) {\r\n    let target = e.target;\r\n    let p = this.fontChange.querySelector('.font');\r\n\r\n    switch (true) {\r\n      case target.classList.contains('source'):\r\n        document.documentElement.style.fontFamily = \"'Source Sans Pro', sans-serif\";\r\n        this.body.style.fontFamily = \"'Source Sans Pro', sans-serif\";\r\n        p.textContent = 'Source sans pro';\r\n        break;\r\n      case target.classList.contains('rubik'):\r\n        document.documentElement.style.fontFamily = \"'Rubik', sans-serif\";\r\n        this.body.style.fontFamily = \"'Rubik', sans-serif\";\r\n        p.textContent = 'Rubik';\r\n        break;\r\n      case target.classList.contains('sans'):\r\n        document.documentElement.style.fontFamily = \"'Open Sans', sans-serif\";\r\n        this.body.style.fontFamily = \"'Open Sans', sans-serif\";\r\n        p.textContent = 'Open sans';\r\n        break;\r\n      default:\r\n        document.documentElement.style.fontFamily = \"'Source Sans Pro', sans-serif\";\r\n        this.body.style.fontFamily = \"'Source Sans Pro', sans-serif\";\r\n        p.textContent = 'Source sans pro';\r\n    }\r\n  }\r\n\r\n  _openFontContainer() {\r\n    this.fontToggleContainer.classList.toggle('hidden');\r\n    this.fontToggleContainer.classList.toggle('flex');\r\n    this.overlay.classList.toggle('hidden');\r\n\r\n    document.querySelector('.angle').classList.toggle('rotate');\r\n  }\r\n\r\n  _searchStringCall(e) {\r\n    let element = e.target.closest('.searchStringLink');\r\n    if (!element) return;\r\n\r\n    // search for any clicked item (synonyms, antonyms)\r\n    this.input.value = element.textContent;\r\n    this._fetchWord(element.textContent.trim());\r\n  }\r\n\r\n  _deleteHistory(e) {\r\n    let delBtn = e.target.closest('.delbtn');\r\n    if (!delBtn) return;\r\n\r\n    const index = parseInt(delBtn.id);\r\n    const itemIndex = this.#history.findIndex((element) => element.id === index);\r\n    this.#history.splice(itemIndex, 1);\r\n    localStorage.setItem('history', JSON.stringify(this.#history));\r\n    this._historyElement();\r\n  }\r\n\r\n  _searchStringHistory(e) {\r\n    let element = e.target.closest('.historyLink');\r\n    if (!element) return;\r\n\r\n    if (e.target.classList.contains('delbtn')) return;\r\n\r\n    // accessing the element to be searched\r\n    let stringEl = element.firstElementChild.firstElementChild.textContent.trim();\r\n    this.input.value = stringEl;\r\n    this._fetchWord(stringEl);\r\n\r\n    // close modal window on clicking on element\r\n    this.historyModalWindow.classList.add('translate-x-[100%]');\r\n  }\r\n\r\n  _historyElement() {\r\n    let history = '';\r\n    this.#history.forEach((historyEl) => {\r\n      history += `\r\n        <div class=\"listEl historyLink bg-historyContainerEl cursor-pointer relative flex items-center justify-between px-4 py-5 dark:bg-darkBg\" id=\"${historyEl.id}\">\r\n          <div class=\"content-container\">\r\n              <li class=\"text-base dark:text-white pb-2\">${historyEl.word}</li>\r\n              <p class=\"text-xs dark:text-white italic\">${historyEl.date}</p>\r\n          </div>\r\n          <i class=\"delbtn fa-solid fa-xmark fa-lg cursor-pointer dark:text-headingsIconsWhiteBg\" id=\"${historyEl.id}\"></i>\r\n        </div>`;\r\n    });\r\n    this.listItem.innerHTML = history || `<div>You've got no history for now, start by making a search!</div>`;\r\n  }\r\n\r\n  _closeWindowModal() {\r\n    this.historyModalWindow.classList.add('translate-x-[100%]');\r\n  }\r\n\r\n  _renderHistory(e) {\r\n    let clickedEl = e.target.closest('.historyContainer');\r\n    if (!clickedEl) return;\r\n    this.historyModalWindow.classList.remove('translate-x-[100%]');\r\n    this._historyElement();\r\n  }\r\n\r\n  _playAudio(e) {\r\n    let clickedEl = e.target.closest('.audio');\r\n    if (!clickedEl) return;\r\n    let audioFound = false;\r\n\r\n    for (const phonetic of this.#data.phonetics) {\r\n      if (phonetic.audio) {\r\n        const audio = new Audio(phonetic.audio);\r\n        audio.play();\r\n\r\n        let audioIcon = clickedEl.firstElementChild;\r\n\r\n        audio.onended = () => {\r\n          audioIcon.classList.remove('fa-pause');\r\n          audioIcon.classList.add('fa-play');\r\n        };\r\n\r\n        audioIcon.classList.remove('fa-play');\r\n        audioIcon.classList.add('fa-pause');\r\n        audioFound = true;\r\n\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (!audioFound) alert(\"There isn't an audio for this word at this time, please check back later or you can search the web\");\r\n  }\r\n\r\n  _renderWordMeaning(data) {\r\n    let html = `\r\n        <div class=\"hd flex items-center justify-between\">\r\n          <div class=\"searchString\">\r\n            <h2 class=\"tracking-widest ${data.word.length > 10 ? 'text-[20px]' : 'text-[30px]'} lg:text-[40px] font-bold text-headingsIconsWhiteBg\">${data.word}</h2>\r\n            <p class=\"font-bold text-bullet\">${data.phonetic ? data.phonetic : ''}</p>\r\n          </div>\r\n\r\n          <div class=\"audioHistoryContainer flex items-center gap-3\">\r\n            <div class=\"audio flex w-3 cursor-pointer items-center justify-center rounded-full bg-headingsIconsWhiteBg dark:bg-white p-6\">\r\n              <i class=\"fa-solid fa-play fa-lg text-textColorsWhiteBg\"></i>\r\n            </div>\r\n            <div class=\"historyContainer flex w-3 cursor-pointer items-center justify-center rounded-full bg-headingsIconsWhiteBg dark:bg-white p-6\">\r\n              <i class=\"fa-solid fa-clock-rotate-left fa-lg text-textColorsWhiteBg\"></i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"meaning__container my-8 flex flex-col gap-[1.5rem]\">\r\n        ${data.meanings.map((result) => {\r\n          return ` ${\r\n            result.antonyms.length\r\n              ? ` <div class=\"antonyms__section my-6 flex gap-[3rem]\">\r\n              <p class=\"font-bold text-headingsIconsWhiteBg\">Antonyms</p>\r\n              <ul class=\"flex flex-wrap gap-[0.5rem]\">\r\n               ${result.antonyms\r\n                 .map((word) => {\r\n                   return `<li class=\"searchStringLink font-sm cursor-pointer text-bullet hover:underline\">${word}</li>`;\r\n                 })\r\n                 .join('')}\r\n              </ul>\r\n            </div>`\r\n              : ''\r\n          }\r\n          \r\n         ${`<div class=\"${result.partOfSpeech} flex items-center justify-between\">\r\n             <h2 class=\"font-bold dark:text-headingsIconsWhiteBg\">${result.partOfSpeech}</h2>\r\n             <div class=\"line h-[2px] w-[40%] bg-headingsIconsWhiteBg\"></div>\r\n           </div>\r\n           <p class=\"my-2 text-sm font-bold text-headingsIconsWhiteBg\">Meaning</p>\r\n\r\n           <ul class=\"flex flex-col ${result.definitions.length > 0 ? 'gap-[1rem]' : ''}\">\r\n              ${\r\n                result.definitions.length\r\n                  ? result.definitions\r\n                      .map((word) => {\r\n                        return `<li class=\"meaningWord text-base text-txtColor dark:text-white\">${word.definition}</li>\r\n              <p class=\"text-sm text-examples font-bold italic mb-[20px]\">${word.example ? word.example : ''}</p>`;\r\n                      })\r\n                      .join('')\r\n                  : ''\r\n              }\r\n            </ul>\r\n           `} \r\n\r\n          ${\r\n            result.synonyms.length\r\n              ? ` <div class=\"synonyms__section my-2 flex gap-[3rem]\">\r\n              <p class=\"font-bold text-headingsIconsWhiteBg\">Synonyms</p>\r\n              <ul class=\"flex flex-wrap gap-[0.5rem]\">\r\n               ${result.synonyms\r\n                 .map((word) => {\r\n                   return `<li class=\"searchStringLink font-sm cursor-pointer text-bullet hover:underline\">${word}</li>`;\r\n                 })\r\n                 .join('')}\r\n              </ul>\r\n            </div>`\r\n              : ''\r\n          }`;\r\n        })}\r\n        </div>\r\n\r\n        <div class=\"w-full\">\r\n          <div class=\"borderTop h-1 w-full border-t border-headingsIconsWhiteBg\"></div>\r\n          <p class=\"font-base underline dark:text-white\">Source</p>\r\n\r\n          ${\r\n            data.sourceUrls.length\r\n              ? data.sourceUrls\r\n                  .map((url) => {\r\n                    return `<div class=\"links__container my-4\">\r\n            <div class=\"link mb-2 flex items-center\">\r\n              <p class=\"text-sm font-bold text-headingsIconsWhiteBg md:text-base hover:underline\"><a href=\"${url}\" target=\"_blank\">${url}</a></p>\r\n              <i class=\"fa-solid fa-up-right-from-square fa-xs pl-2 dark:text-headingsIconsWhiteBg\"></i>\r\n            </div>\r\n          </div>`;\r\n                  })\r\n                  .join('')\r\n              : ''\r\n          }\r\n      </div>\r\n        `;\r\n    this.mainContainer.innerHTML = html;\r\n  }\r\n\r\n  _searchWord(e) {\r\n    e.preventDefault();\r\n    if (!this.input.value) return;\r\n    this._fetchWord(this.input.value);\r\n  }\r\n\r\n  async _fetchWord(word) {\r\n    try {\r\n      this.loader.classList.remove('hidden');\r\n      // emptying main container when searching for any new word\r\n      this.mainContainer.innerHTML = '';\r\n      const res = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`);\r\n      const [data] = await res.json();\r\n      if (!res.ok) throw new Error('Word not found!');\r\n\r\n      this.#data = data;\r\n      this._renderWordMeaning(this.#data);\r\n\r\n      // increment global variable index\r\n      ++this.#index;\r\n\r\n      let storage = {\r\n        id: this.#index,\r\n        word: this.#data.word,\r\n        date: this.#date,\r\n        timeCreated: this.#currentTime,\r\n      };\r\n\r\n      let index = 0;\r\n      const wordExistInTheArray = this.#history.some((historyEl) => historyEl.word === this.#data.word);\r\n\r\n      if (wordExistInTheArray) {\r\n        // * find the index of the word if it's in the history array already.\r\n        index = this.#history.findIndex((obj) => obj.word === this.#data.word);\r\n\r\n        // todo: if it's less than or equal to means that, the existing word has been stored for the past 24hours or more\r\n        if (this.#history[index].timeCreated <= this.#twentyFourHours) {\r\n          this.#history.push(storage);\r\n        } else {\r\n          this.#history[index].timeCreated = this.#currentTime;\r\n          this.#history[index].date = this.#date;\r\n        }\r\n      } else {\r\n        this.#history.push(storage);\r\n      }\r\n\r\n      // this.#history.unshift(storage);\r\n      localStorage.setItem('history', JSON.stringify(this.#history));\r\n      localStorage.setItem('index', JSON.stringify(this.#index));\r\n    } catch (err) {\r\n      console.log(err);\r\n      this.mainContainer.innerHTML = `Sorry pal, we couldn't find the word you were searching for. You can try the search again at later time or head to the web instead`;\r\n    } finally {\r\n      this.loader.classList.add('hidden');\r\n    }\r\n  }\r\n}\r\n\r\nconst word = new Dictionary();\r\n"],"names":["$d785fa294e24c4c1$export$cd80a8f028a50810","$9edf0f95bd74c899$export$133921574f28743c","index","Math","floor","random","length","data","history","JSON","parse","localStorage","getItem","parseInt","date","Date","toLocaleString","lastGeneratedTime","currentTime","getTime","timeSinceLastGenerated","this","twentyFourHours","timeLeft","generatedWord","constructor","form","document","querySelector","input","mainContainer","fontChange","fontToggleContainer","body","loader","toggleBg","toggle","overlay","listItem","historyModalWindow","button","addEventListener","_searchWord","bind","_playAudio","_renderHistory","_searchStringCall","_searchStringHistory","_deleteHistory","_openFontContainer","_toggleFont","_toggleBackgroundColor","_hideModal","_closeWindowModal","setItem","toString","stringify","console","log","_generateRandomWords","value","_fetchWord","classList","add","remove","documentElement","e","target","p","contains","style","fontFamily","textContent","element","closest","trim","delBtn","id","itemIndex","findIndex","splice","_historyElement","stringEl","firstElementChild","forEach","historyEl","word","innerHTML","clickedEl","audioFound","phonetic","phonetics","audio","Audio","play","audioIcon","onended","alert","_renderWordMeaning","html","meanings","map","result","antonyms","join","partOfSpeech","definitions","definition","example","synonyms","sourceUrls","url","preventDefault","async","res","fetch","json","ok","Error","storage","timeCreated","some","obj","push","err"],"version":3,"file":"index.7300acd1.js.map"}